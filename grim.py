# -*- coding: utf-8 -*-
"""
 A   _____ _____  _____ __  __
    / ____|  __ \|_   _|  \/  |
   | |  __| |__) | | | | \  / |
   | | |_ |  _  /  | | | |\/| |
   | |__| | | \ \ _| |_| |  | |
    \_____|_|  \_\_____|_|  |_|
                                 Script

Analysing GRoyne Impacts on Morphology Script
Thomas Burke and Suzana Ilic, Lancaster University, February 2017
Version 0.2 (in dev), February 2017

Base code generated by Plugin Builder
"""

# Imports
from PyQt4.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QVariant, QUrl
from PyQt4.QtGui import QAction, QIcon, QFileDialog, QMessageBox, QButtonGroup, QDesktopServices
from qgis.core import QgsRasterLayer, QgsVectorLayer, QgsMapLayerRegistry, QgsVectorFileWriter, QgsField, QgsFeature,\
    QgsGeometry
from qgis.analysis import QgsZonalStatistics
import processing
# Initialize Qt resources from file resources.py
import resources
# Import the code for the dialog
from grim_dialog import GrimDialog
# Import from the Python standard library
import os.path
import csv

import time


class Grim:
    """QGIS Plugin Implementation."""

    # Skeleton methods
    # These were generated by Plugin Builder, and are required for the plugin to run

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Grim_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = GrimDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Grim')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'Grim')
        self.toolbar.setObjectName(u'Grim')

        # Custom instance attributes
        # These are used in GIS processing
        self.input_elevation_raster_layer = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Grim', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Grim/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Grim'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # Establishing signal / slot connections
        # Welcome screen
        self.dlg.groyne_elevation_analysis_welcome_radio.toggled.connect(self.check_welcome_radio_buttons)
        self.dlg.beach_profile_generation_welcome_radio.toggled.connect(self.check_welcome_radio_buttons)
        # General buttons
        self.dlg.help_button.clicked.connect(self.show_help)
        self.dlg.results_directory_button.clicked.connect(self.select_results_directory)
        self.dlg.input_elevation_raster_button.clicked.connect(self.select_input_raster)
        self.dlg.input_groyne_cell_polygon_button.clicked.connect(self.select_input_groyne_cell_polygon)
        self.dlg.input_groyne_cell_polygons_button.clicked.connect(self.select_input_groyne_cell_polygons)
        self.dlg.input_groyne_line_button.clicked.connect(self.select_input_groyne_line)
        self.dlg.input_groyne_lines_button.clicked.connect(self.select_input_groyne_lines)
        self.dlg.input_groyne_multipoints_button.clicked.connect(self.select_input_groyne_multipoints)
        self.dlg.calculate_button.clicked.connect(self.perform_analysis)
        self.dlg.close_button.clicked.connect(self.dlg.reject)
        # Screen navigation buttons
        self.dlg.previous_button.clicked.connect(self.previous_screen)
        self.dlg.next_button.clicked.connect(self.next_screen)
        # Radio buttons
        # self.check_groyne_radio_buttons is called whenever a button is changed
        self.dlg.single_polygon_radio.toggled.connect(self.check_groyne_radio_buttons)
        self.dlg.multiple_polygons_radio.toggled.connect(self.check_groyne_radio_buttons)
        self.dlg.single_line_radio.toggled.connect(self.check_groyne_radio_buttons)
        self.dlg.multiple_lines_radio.toggled.connect(self.check_groyne_radio_buttons)
        self.dlg.multiple_multipoints_radio.toggled.connect(self.check_groyne_radio_buttons)
        # Groyne multipoints
        self.dlg.multipoints_order_by_comboBox.activated.connect(self.check_multipoints_order_by)
        # Beach profiles tool
        self.dlg.profiles_results_directory_button.clicked.connect(self.profiles_select_results_directory)
        self.dlg.profiles_input_elevation_raster_button.clicked.connect(self.profiles_select_input_raster)
        self.dlg.profiles_input_lines_button.clicked.connect(self.profiles_select_input_lines)
        self.dlg.profiles_calculate_button.clicked.connect(self.profiles_perform_analysis)

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Grim'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    def run(self):
        """Run method that performs all the real work"""

        # Making the window a fixed size
        self.dlg.setFixedSize(self.dlg.size())

        # Defining the page indexes
        self.page_indexes = {"first": 0,
                             "welcome": 0,
                             "elevation results directory": 1,
                             "elevation dem": 2,
                             "elevation groyne input method": 3,
                             "single groyne cells input": 4,
                             "multiple groyne cells input": 5,
                             "single groyne lines input": 6,
                             "multiple groyne lines input": 7,
                             "groyne multipoints input": 8,
                             "elevation advanced settings": 9,
                             "elevation calculate": 10,
                             "elevation completed": 11,
                             "profiles results directory": 12,
                             "profiles elevation dem": 13,
                             "profiles single groyne lines input": 14,
                             "profiles calculate": 15,
                             "profiles completed": 16,
                             "last": 16}

        # Set the current page to the first page, take the user to the first page, then disable the navigation buttons.
        # They will be enabled again when they select a tool radio button.
        self.current_tab = self.page_indexes["first"]
        self.dlg.stack.setCurrentIndex(self.current_tab)
        self.dlg.previous_button.setEnabled(False)
        self.dlg.next_button.setEnabled(False)

        # Workaround - Want to unselect both buttons, but as they are exclusive you are only able to unselect
        # one. First, set exclusive to False, then unselect both, then make them exclusive again
        self.toolGroup = QButtonGroup()
        self.toolGroup.addButton(self.dlg.groyne_elevation_analysis_welcome_radio)
        self.toolGroup.addButton(self.dlg.beach_profile_generation_welcome_radio)
        self.toolGroup.setExclusive(False)
        self.dlg.groyne_elevation_analysis_welcome_radio.setChecked(False)
        self.dlg.beach_profile_generation_welcome_radio.setChecked(False)
        self.toolGroup.setExclusive(True)
        self.tool_selected = None

        # Elevation results directory screen
        self.results_directory_path = None
        self.dlg.results_directory_lineEdit.clear()

        # Elevation rasters screen
        self.input_elevation_rasters_paths = None
        self.input_elevation_raster_layer = None
        self.input_elevation_raster_ok = None
        self.dlg.input_elevation_rasters_textEdit.clear()

        # Groyne input method selection screen
        self.polygonGroup = QButtonGroup()
        self.polygonGroup.addButton(self.dlg.single_polygon_radio)
        self.polygonGroup.addButton( self.dlg.multiple_polygons_radio)
        self.polygonGroup.addButton(self.dlg.single_line_radio)
        self.polygonGroup.addButton(self.dlg.multiple_lines_radio)
        self.polygonGroup.addButton(self.dlg.multiple_multipoints_radio)
        self.polygonGroup.setExclusive(False)
        self.dlg.single_polygon_radio.setChecked(False)
        self.dlg.multiple_polygons_radio.setChecked(False)
        self.dlg.single_line_radio.setChecked(False)
        self.dlg.multiple_lines_radio.setChecked(False)
        self.dlg.multiple_multipoints_radio.setChecked(False)
        self.polygonGroup.setExclusive(True)
        self.groyne_input_method = None

        # Single polygon shapefile
        self.input_groyne_cell_polygon_path = None
        self.input_groyne_cell_polygon = None
        self.input_groyne_cell_polygon_ok = None
        self.dlg.input_groyne_cell_polygon_lineEdit.clear()

        # Multiple polygon shapefiles
        self.input_groyne_cell_polygons_paths = None
        self.input_groyne_cell_polygons = []
        self.input_groyne_cell_polygons_invalid_layers = None
        self.dlg.input_groyne_cell_polygons_textEdit.clear()

        # Single line shapefile
        self.input_groyne_line_path = None
        self.input_groyne_line = None
        self.input_groyne_line_ok = None
        self.dlg.input_groyne_line_lineEdit.clear()

        # Multiple line shapefiles
        self.input_groyne_lines_paths = None
        self.dlg.multipoints_order_by_comboBox.setEnabled(False)

        # Multiple multipoint shapefiles
        self.input_groyne_multipoints = None
        self.order_by_field = "FID"

        self.copied_groyne_cell_polygons = []
        
        self.results = []

        # Beach profiles tool
        # Profiles results directory
        self.profiles_results_directory_path = None
        self.dlg.profiles_results_directory_lineEdit.clear()
        self.dlg.profiles_distance_spinBox.setValue(1)

        # Profiles elevation rasters
        self.profiles_input_elevation_rasters_paths = None
        self.profiles_input_elevation_rasters = None
        self.dlg.profiles_input_elevation_rasters_textEdit.clear()

        # Profiles profile lines
        self.profiles_input_line = None
        self.profiles_input_lines_paths = None
        self.dlg.profiles_input_lines_textEdit.clear()

        # show the dialog
        self.dlg.show()
        
        self.check_inputs()

    # Custom methods
    # These contain logic for the GIS analysis etc
    # Groyne Elevation Analysis Tool
    
    def check_inputs(self):
        """ Check that all inputs are present."""

        # Check if any of the fields are blank
        if self.input_elevation_rasters_paths is None or len(self.input_elevation_rasters_paths) == 0:
            self.dlg.elevation_raster_check_label.setText("Please select the input digital elevation model.")
            self.dlg.elevation_raster_check_label.setStyleSheet('color: red')

        if self.input_groyne_cell_polygon_path is None:
            self.dlg.groyne_cell_check_label.setText("Please select the input groyne cell polygon.")
            self.dlg.groyne_cell_check_label.setStyleSheet('color: red')

        if self.input_groyne_cell_polygons_paths is None:
            self.dlg.multiple_groyne_cell_check_label.setText("Please select the input groyne cell polygons.")
            self.dlg.multiple_groyne_cell_check_label.setStyleSheet('color: red')

        if self.results_directory_path is None or self.results_directory_path == "":
            self.dlg.results_directory_check_label.setText("Please select a results directory.")
            self.dlg.results_directory_check_label.setStyleSheet('color: red')
        else:
            self.dlg.results_directory_check_label.setText("Results directory selected.")
            self.dlg.results_directory_check_label.setStyleSheet('color: green')

        if self.input_groyne_line is None:
            self.dlg.groyne_line_check_label.setText("Please select the input groyne line.")
            self.dlg.groyne_line_check_label.setStyleSheet('color: red')

            self.dlg.groyne_lines_check_label.setText("Please select the input groyne lines.")
            self.dlg.groyne_lines_check_label.setStyleSheet('color: red')

        if self.input_groyne_multipoints is None:
            self.dlg.groyne_multipoints_check_label.setText("Please select the input groyne multipoints.")
            self.dlg.groyne_multipoints_check_label.setStyleSheet('color: red')

        # Beach profile tool
        if self.profiles_results_directory_path is None or self.profiles_results_directory_path == "":
            self.dlg.profiles_results_directory_check_label.setText("Please select a results directory.")
            self.dlg.profiles_results_directory_check_label.setStyleSheet('color: red')
        else:
            self.dlg.profiles_results_directory_check_label.setText("Results directory selected.")
            self.dlg.profiles_results_directory_check_label.setStyleSheet('color: green')

        if self.profiles_input_elevation_rasters_paths is None or len(self.profiles_input_elevation_rasters_paths) == 0:
            self.dlg.profiles_elevation_raster_check_label.setText("Please select the input digital elevation model(s).")
            self.dlg.profiles_elevation_raster_check_label.setStyleSheet('color: red')
        else:
            self.dlg.profiles_elevation_raster_check_label.setText("Digital elevation model(s) selected.")
            self.dlg.profiles_elevation_raster_check_label.setStyleSheet('color: green')

        if self.profiles_input_line is None:
            self.dlg.profiles_lines_check_label.setText("Please select the input profile line(s).")
            self.dlg.profiles_lines_check_label.setStyleSheet('color: red')

    def check_welcome_radio_buttons(self):
        """ One of the welcome screens radio buttons has been toggled. Check which is currently active.
        Change current tab, so that when self.next_screen is called, user is taken to the correct tool start screen,
        rather than just the next one. Enable next button (may be disabled if self.selected_tool
        was previously none). """
        if self.dlg.groyne_elevation_analysis_welcome_radio.isChecked() is True:
            self.tool_selected = "groyne_elevation_analysis"
            self.current_tab = self.page_indexes['welcome']
            self.dlg.next_button.setEnabled(True)
        elif self.dlg.beach_profile_generation_welcome_radio.isChecked() is True:
            self.tool_selected = "beach_profile_generation"
            self.current_tab = self.page_indexes['elevation completed']
            self.dlg.next_button.setEnabled(True)

    def select_results_directory(self):
        """ Bring up a screen allowing users to pick a folder, store this as an attribute """
        self.results_directory_path = QFileDialog.getExistingDirectory(self.dlg, "Choose results directory")
        self.dlg.results_directory_lineEdit.setText(self.results_directory_path)
        self.check_inputs()

    def select_input_raster(self):
        """ Bring up a screen allowing users to select a single .TIf file, store this as an attribute and check
        if valid. """
        self.input_elevation_rasters_paths = QFileDialog.getOpenFileNames(self.dlg, "Select input rasters", filter="*.tif")
        if len(self.input_elevation_rasters_paths) != 0:
            self.dlg.input_elevation_rasters_textEdit.clear()
            self.input_elevation_rasters = []
            self.input_elevation_rasters_invalid_layers = 0
            for path in self.input_elevation_rasters_paths:
                layer_name = os.path.basename(path)
                layer_name = os.path.splitext(layer_name)[0]
                elevation_layer = QgsRasterLayer(path, layer_name)
                if elevation_layer.isValid() is True:
                    self.dlg.input_elevation_rasters_textEdit.append("<span style=\"color: green;\">{0}</span".format(path))
                    self.input_elevation_rasters.append(elevation_layer)
                else:
                    self.dlg.input_elevation_rasters_textEdit.append("<span style=\"color: red;\">{0}</span".format(path))
                    self.input_elevation_rasters_invalid_layers += 1

            if self.input_elevation_rasters_invalid_layers == 0:
                self.dlg.elevation_raster_check_label.setText("Elevation rasters have been selected and are all valid.")
                self.dlg.elevation_raster_check_label.setStyleSheet('color: green')
            elif self.input_elevation_rasters_invalid_layers == 1:
                self.dlg.elevation_raster_check_label.setText("Elevation rasters have been selected, but one is invalid.")
                self.dlg.elevation_raster_check_label.setStyleSheet('color: red')
            else:
                self.dlg.elevation_raster_check_label.setText("Elevation rasters have been selected, but {0} are invalid".format(self.input_groyne_cell_polygons_invalid_layers))
                self.dlg.elevation_raster_check_label.setStyleSheet('color: red')
        else:
            self.input_elevation_rasters = []

        self.check_inputs()

    def check_groyne_radio_buttons(self):
        """ One of the radio buttons has been toggled. Check which is currently active.
        Change current tab, so that when self.next_screen is called, user is taken to the correct screen,
        rather than just the next one. Enable next button (may be disabled if self.groyne_input_method
        was previously none). """
        if self.dlg.single_polygon_radio.isChecked() is True:
            self.groyne_input_method = "single_polygon"
            self.dlg.next_button.setEnabled(True)
        elif self.dlg.multiple_polygons_radio.isChecked() is True:
            self.groyne_input_method = "multiple_polygons"
            self.dlg.next_button.setEnabled(True)
        elif self.dlg.single_line_radio.isChecked() is True:
            self.groyne_input_method = "single_line"
            self.dlg.next_button.setEnabled(True)
        elif self.dlg.multiple_lines_radio.isChecked() is True:
            self.groyne_input_method = "multiple_lines"
            self.dlg.next_button.setEnabled(True)
        elif self.dlg.multiple_multipoints_radio.isChecked() is True:
            self.groyne_input_method = "multiple_multipoints"
            self.dlg.next_button.setEnabled(True)

    def select_input_groyne_cell_polygon(self):
        """ Bring up a screen allowing the user to select a single .shp file. Store this as an attribute and check
        if valid. """
        self.input_groyne_cell_polygon_path = QFileDialog.getOpenFileName(self.dlg, "Select input groyne cell polygon",
                                                                     filter="*.shp")
        self.dlg.input_groyne_cell_polygon_lineEdit.clear()
        self.dlg.input_groyne_cell_polygon_lineEdit.setText(self.input_groyne_cell_polygon_path)
        if self.input_groyne_cell_polygon_path != "":
            self.input_groyne_cell_polygon = QgsVectorLayer(self.input_groyne_cell_polygon_path, "Input Groyne Cell", "ogr")

            if self.input_groyne_cell_polygon.isValid() is True:
                self.dlg.groyne_cell_check_label.setText("Groyne cell polygon has been selected and is valid.")
                self.dlg.groyne_cell_check_label.setStyleSheet('color: green')
                self.input_groyne_cell_polygon_ok = True
            else:
                self.dlg.groyne_cell_check_label.setText("Groyne cell polygon has been selected but is not valid")
                self.dlg.groyne_cell_check_label.setStyleSheet('color: red')
                self.input_groyne_cell_polygon_ok = False
        else:
            self.input_groyne_cell_polygon_path = None
            self.input_groyne_cell_polygon = None

        self.input_groyne_cell_polygons = [self.input_groyne_cell_polygon]

        self.check_inputs()

    def select_input_groyne_cell_polygons(self):
        """ Bring up a screen allowing the user to select multiple .shp files. Store this as an attribute and check
        if valid. """
        self.input_groyne_cell_polygons_paths = QFileDialog.getOpenFileNames(self.dlg,
                                                                             "Select input groyne cell polygons",
                                                                             filter = "*.shp")
        if len(self.input_groyne_cell_polygons_paths) != 0:
            self.input_groyne_cell_polygons = []
            self.dlg.input_groyne_cell_polygons_textEdit.clear()
            self.input_groyne_cell_polygons_invalid_layers = 0
            counter = 1
            for path in self.input_groyne_cell_polygons_paths:
                groyne_cell_layer = QgsVectorLayer(path, "Groyne cell {0}".format(counter), "ogr")
                if groyne_cell_layer.isValid() is True:
                    self.dlg.input_groyne_cell_polygons_textEdit.append("<span style=\"color: green;\">{0}</span".format(path))
                    self.input_groyne_cell_polygons.append(groyne_cell_layer)
                else:
                    self.dlg.input_groyne_cell_polygons_textEdit.append(
                        "<span style=\"color: red;\">{0}</span".format(path))
                    self.input_groyne_cell_polygons_invalid_layers += 1

            if self.input_groyne_cell_polygons_invalid_layers == 0:
                self.dlg.multiple_groyne_cell_check_label.setText("Groyne cell polygons have been selected and are all valid.")
                self.dlg.multiple_groyne_cell_check_label.setStyleSheet('color: green')
            elif self.input_groyne_cell_polygons_invalid_layers == 1:
                self.dlg.multiple_groyne_cell_check_label.setText("Groyne cell polygons have been selected, but one is invalid.")
                self.dlg.multiple_groyne_cell_check_label.setStyleSheet('color: red')
            else:
                self.dlg.multiple_groyne_cell_check_label.setText("Groyne cell polygons have been selected, but {0} are invalid".format(self.input_groyne_cell_polygons_invalid_layers))
                self.dlg.multiple_groyne_cell_check_label.setStyleSheet('color: red')
        else:
            self.input_groyne_cell_polygons = []

        self.check_inputs()

    def select_input_groyne_line(self):
        """ Bring up a screen allowing the user to select a single .shp file. Store this as an attribute and check
        if valid. """
        self.input_groyne_line_path = QFileDialog.getOpenFileName(self.dlg, "Select input groyne lines",
                                                                     filter="*.shp")
        if self.input_groyne_line_path != "":
            self.dlg.input_groyne_line_lineEdit.setText(self.input_groyne_line_path)
            self.input_groyne_line = QgsVectorLayer(self.input_groyne_line_path, "Input Groyne Lines", "ogr")

            if self.input_groyne_line.isValid() is True:
                self.dlg.groyne_line_check_label.setText("Groyne line has been selected and is valid.")
                self.dlg.groyne_line_check_label.setStyleSheet('color: green')
                self.input_groyne_line_ok = True
                self.input_groyne_line = [self.input_groyne_line]
            else:
                self.dlg.groyne_line_check_label.setText("Groyne line has been selected but is not valid")
                self.dlg.groyne_line_check_label.setStyleSheet('color: red')
                self.input_groyne_line_ok = False
                self.input_groyne_line = [self.input_groyne_line]
        else:
            self.input_groyne_line_path = None
            self.input_groyne_line = None
            self.input_groyne_line = None

        self.check_inputs()

    def select_input_groyne_lines(self):
        """ Bring up a screen allowing the user to select multiple .shp files. Store this as an attribute and check
        if valid. """
        self.dlg.input_groyne_lines_textEdit.clear()
        self.input_groyne_lines_paths = QFileDialog.getOpenFileNames(self.dlg,
                                                                             "Select input groyne lines",
                                                                             filter = "*.shp")
        if len(self.input_groyne_lines_paths) != 0:
            self.dlg.input_groyne_lines_textEdit.clear()
            self.input_groyne_lines_invalid_layers = 0
            counter = 1
            self.input_groyne_line = []
            for path in self.input_groyne_lines_paths:
                groyne_line_layer = QgsVectorLayer(path, "Groyne line {0}".format(counter), "ogr")
                if groyne_line_layer.isValid() is True:
                    self.dlg.input_groyne_lines_textEdit.append("<span style=\"color: green;\">{0}</span".format(path))
                    self.input_groyne_line.append(groyne_line_layer)
                else:
                    self.dlg.input_groyne_lines_textEdit.append(
                        "<span style=\"color: red;\">{0}</span".format(path))
                    self.input_groyne_lines_invalid_layers += 1

            if self.input_groyne_lines_invalid_layers == 0:
                self.dlg.groyne_lines_check_label.setText("Groyne lines have been selected and are all valid.")
                self.dlg.groyne_lines_check_label.setStyleSheet('color: green')
            elif self.input_groyne_lines_invalid_layers == 1:
                self.dlg.groyne_lines_check_label.setText("Groyne lines have been selected, but one is invalid.")
                self.dlg.groyne_lines_check_label.setStyleSheet('color: red')
            else:
                self.dlg.groyne_lines_check_label.setText("Groyne lines have been selected, but {0} are invalid".format(self.input_groyne_cell_polygons_invalid_layers))
                self.dlg.groyne_lines_check_label.setStyleSheet('color: red')
        else:
            self.input_groyne_line = None
            self.input_groyne_lines_paths = None

    def select_input_groyne_multipoints(self):
        """ Bring up a screen allowing the user to select multiple .shp files. Store this as an attribute and check
        if valid. """
        self.input_groyne_multipoints_paths = QFileDialog.getOpenFileNames(self.dlg,
                                                                             "Select input groyne multipoints",
                                                                             filter = "*.shp")
        if len(self.input_groyne_multipoints_paths ) != 0:
            self.dlg.input_groyne_multipoints_textEdit.clear()
            self.input_groyne_multipoints_invalid_layers = 0
            counter = 1
            self.input_groyne_multipoints = []
            for path in self.input_groyne_multipoints_paths:
                groyne_multipoint_layer = QgsVectorLayer(path, "Groyne multipoint {0}".format(counter), "ogr")
                self.input_groyne_multipoints.append(groyne_multipoint_layer)
                if groyne_multipoint_layer.isValid() is True:
                    self.dlg.input_groyne_multipoints_textEdit.append("<span style=\"color: green;\">{0}</span>".format(path))
                else:
                    self.dlg.input_groyne_multipoints_textEdit.append(
                        "<span style=\"color: red;\">{0}</span>".format(path))
                    self.input_groyne_multipoints_invalid_layers += 1

            if self.input_groyne_multipoints_invalid_layers == 0:
                self.dlg.groyne_multipoints_check_label.setText("Groyne multipoints have been selected and are all valid.")
                self.dlg.groyne_multipoints_check_label.setStyleSheet('color: green')
            elif self.input_groyne_multipoints_invalid_layers == 1:
                self.dlg.groyne_multipoints_check_label.setText("Groyne multipoints have been selected, but one is invalid.")
                self.dlg.groyne_multipoints_check_label.setStyleSheet('color: red')
            else:
                self.dlg.groyne_multipoints_check_label.setText("Groyne multipoints have been selected, but {0} are invalid".format(self.input_groyne_cell_polygons_invalid_layers))
                self.dlg.groyne_multipoints_check_label.setStyleSheet('color: red')

            # The points to lines process involves modifying the file, so make a copy first
            self.copied_groyne_multipoints = []

            # Find out which fields occur in all layers, so the user can select one to order the points by
            # when converting them into a line
            all_sets = []
            for layer in self.input_groyne_multipoints:
                field_name_set = set()
                pr = layer.dataProvider()
                for field in pr.fields():
                    name = str(field.name())
                    field_name_set.add(name)
                all_sets.append(field_name_set)
            common_fields = set.intersection(*all_sets)
            self.dlg.multipoints_order_by_comboBox.setEnabled(True)
            self.dlg.multipoints_order_by_comboBox.addItem("FID")
            for field in common_fields:
                self.dlg.multipoints_order_by_comboBox.addItem(field)
        else:
            self.dlg.input_groyne_multipoints_textEdit.clear()
            self.input_groyne_multipoints = None
            self.input_groyne_multipoints_paths = None

        self.check_inputs()

    def check_multipoints_order_by(self):
        self.order_by_field = self.dlg.multipoints_order_by_comboBox.currentText()

    def duplicate_shapefile(self, input_shapefile_list, output_shapefile_list):
        """ Create copies of shapefiles and saves to disc. """
        for layer in input_shapefile_list:
            layer_name = os.path.basename(layer.source())
            layer_name = os.path.splitext(layer_name)[0]
            copied_groyne_cell_polygon_path = self.results_directory_path + "\\" + layer_name + "_copied.shp"
            QgsVectorFileWriter.writeAsVectorFormat(layer, copied_groyne_cell_polygon_path,
                                                    "utf-8", None)
            output_shapefile_list.append(QgsVectorLayer(copied_groyne_cell_polygon_path,
                                                             layer_name + " Copied", "ogr"))

    def groyne_cells_from_lines(self):
        """ Takes a set of lines, and creates polygons representing groyne cells. """
        generated_groyne_cells = QgsVectorLayer("Polygon?crs=epsg:27700", "Groyne Cells", "memory")
        groynes = []
        for line in self.input_groyne_line:
            for feat in line.getFeatures():
                groynes.append(feat)
        count = 0
        while count < len(groynes) - 1:
            # Get the endpoints of the lines
            # First Line
            feat1 = groynes[count]
            geom = feat1.geometry().asPolyline()
            groyne_line_1_1 = geom[0]
            groyne_line_1_2 = geom[-1]
            # Second Line
            feat2 = groynes[count + 1]
            geom = feat2.geometry().asPolyline()
            groyne_line_2_1 = geom[0]
            groyne_line_2_2 = geom[-1]

            # Create all possible line combinations from these points
            possible_point_combinations = [[groyne_line_1_1, groyne_line_2_1], [groyne_line_1_2, groyne_line_2_1],
                                           [groyne_line_1_1, groyne_line_2_2], [groyne_line_1_2, groyne_line_2_2]]
            lines = []

            for point_combination in possible_point_combinations:
                line = QgsVectorLayer("LineString?crs=epsg:27700", "Line", "memory")
                pr = line.dataProvider()
                feature = QgsFeature()
                start = point_combination[0]
                end = point_combination[1]
                geom = [start, end]
                feature.setGeometry(QgsGeometry.fromPolyline(geom))
                pr.addFeatures([feature])
                lines.append(line)

            # Find lines that do not intersect
            # (Using all lines, polygonizing them then dissolving the result would also work here)
            groyne_lines = []
            not_crossing = []
            for line in lines:
                for line2 in lines:
                    if line == line2:
                        pass
                    else:
                        if line.getFeatures().next().geometryAndOwnership().intersects(
                                line2.getFeatures().next().geometryAndOwnership()) is True:
                            pass
                        else:
                            not_crossing.append([line, line2])

            for layer in not_crossing[0]:
                groyne_lines.append(layer)

            # Create an outline of the groyne cell using lines
            groyne_outline = QgsVectorLayer("LineString?crs=epsg:27700", "Groyne Lines", "memory")
            pr = groyne_outline.dataProvider()
            for line in groyne_lines:
                feats = line.getFeatures()
                feats = feats.next()
                pr.addFeatures([feats])
            pr.addFeatures([feat1, feat2])

            # Polygonize it
            # Memory layers need to be in the TOC to run processing algs on them
            QgsMapLayerRegistry.instance().addMapLayer(groyne_outline)
            created_poly = processing.runalg("qgis:polygonize", groyne_outline, False,
                              False, None)
            created_poly = QgsVectorLayer(created_poly['OUTPUT'], "Groyne Cell", "ogr")
            # Remove from TOC as no longer needed
            QgsMapLayerRegistry.instance().removeMapLayer(groyne_outline.id())
            # Create a single layer with each groyne cell as a feature
            pr = generated_groyne_cells.dataProvider()
            feats = created_poly.getFeatures()
            feats = feats.next()
            pr.addFeatures([feats])

            count += 1

        # Write the groyne cells to disc (they are a useful output)
        generated_groyne_cells_path = self.results_directory_path + "\\generated_groyne_cells.shp"
        QgsVectorFileWriter.writeAsVectorFormat(generated_groyne_cells, generated_groyne_cells_path,
                                                "utf-8", None)
        self.copied_groyne_cell_polygons = [generated_groyne_cells]

    def groyne_multipoints_to_lines(self):
        self.input_groyne_line = []
        for multipoint in self.copied_groyne_multipoints:
            # The points to lines alg needs a field to group the points together. Add one
            multipoint.dataProvider().addAttributes(
                [QgsField("Grouped", QVariant.String)])
            multipoint.updateFields()
            for feature in multipoint.getFeatures():
                groyne_index = feature.fieldNameIndex("Grouped")
                groyne_field = {groyne_index: "Yes"}
                multipoint.dataProvider().changeAttributeValues({feature.id(): groyne_field})

            # If FID is selected as the point order method, add an FID field to sort by
            if self.order_by_field == "FID":
                multipoint.dataProvider().addAttributes(
                    [QgsField("FID", QVariant.Int)])
                multipoint.updateFields()
                for feature in multipoint.getFeatures():
                    fid_index = feature.fieldNameIndex("FID")
                    fid_field = {fid_index: feature.id()}
                    multipoint.dataProvider().changeAttributeValues({feature.id(): fid_field})

            # Memory layers need to be in the TOC to run processing algs on them
            QgsMapLayerRegistry.instance().addMapLayer(multipoint)
            # Convert the points to lines
            groyne_line = processing.runalg("saga:convertpointstolines",multipoint, self.order_by_field,"Grouped",None)
            groyne_line = QgsVectorLayer(groyne_line['LINES'], "Groyne Line", "ogr")
            self.input_groyne_line.append(groyne_line)

    def perform_analysis(self):
        if self.groyne_input_method == "single_polygon":
            self.duplicate_shapefile(self.input_groyne_cell_polygons, self.copied_groyne_cell_polygons)
            self.calculate_zonal_statistics()
        elif self.groyne_input_method == "multiple_polygons":
            self.duplicate_shapefile(self.input_groyne_cell_polygons, self.copied_groyne_cell_polygons)
            self.calculate_zonal_statistics()
        elif self.groyne_input_method == "single_line":
            self.groyne_cells_from_lines()
            self.calculate_zonal_statistics()
        elif self.groyne_input_method == "multiple_lines":
            self.groyne_cells_from_lines()
            self.calculate_zonal_statistics()
        elif self.groyne_input_method == "multiple_multipoints":
            self.duplicate_shapefile(self.input_groyne_multipoints, self.copied_groyne_multipoints)
            self.groyne_multipoints_to_lines()
            self.groyne_cells_from_lines()
            self.calculate_zonal_statistics()

    def calculate_zonal_statistics(self):
        """ Use QgsZonalStatistics to calculate the average raster value beneath each polygon IE the average beach
        elevation within each polygon. """
        counter = 1
        for layer in self.input_elevation_rasters:
            QgsMapLayerRegistry.instance().addMapLayer(layer)
            for polygon in self.copied_groyne_cell_polygons:
                QgsMapLayerRegistry.instance().addMapLayer(polygon)
                # Arguments - (polygon, raster, attribute prefix, band, stat to calculate
                zonal_stats = QgsZonalStatistics(polygon, layer.source(), "GR_{0!s}_".format(counter), 1,
                                             QgsZonalStatistics.Mean)
                zonal_stats.calculateStatistics(None)
            counter += 1

        self.add_height_adjustment()

    def add_height_adjustment(self):
        counter = 1
        for layer in self.input_elevation_rasters:
            for polygon in self.copied_groyne_cell_polygons:
                field_name = "GR_{0!s}_mean".format(counter)
                for feature in polygon.getFeatures():
                    height = feature[field_name]
                    new_height = height + self.dlg.height_adjustment_spinBox.value()
                    new_height_field = {feature.fieldNameIndex(field_name): new_height}
                    polygon.dataProvider().changeAttributeValues({feature.id(): new_height_field})

        self.calculate_area()

    def calculate_area(self):
        """ Add a field to the shape file called area, insert polygon area into this."""
        for polygon in self.copied_groyne_cell_polygons:
            polygon.dataProvider().addAttributes([QgsField("GR_Area", QVariant.Double)])
            polygon.updateFields()

            for feature in polygon.getFeatures():
                area = feature.geometry().area()
                area_index = feature.fieldNameIndex('GR_Area')
                area_field = {area_index: area}
                polygon.dataProvider().changeAttributeValues({feature.id(): area_field})

            # Add a volume field for each elevation raster
            counter = 1
            for raster in self.input_elevation_rasters:
                polygon.dataProvider().addAttributes([QgsField("GR_{0!s}_Vol".format(counter), QVariant.Double)])
                polygon.updateFields()
                counter += 1

        self.calculate_volume()

    def calculate_volume(self):
        """ Insert volume (area * average height) into the volume field. """
        counter = 1
        for raster in self.input_elevation_rasters:
            for polygon in self.copied_groyne_cell_polygons:
                for feature in polygon.getFeatures():
                    volume_index = feature.fieldNameIndex("GR_{0!s}_Vol".format(counter))
                    volume = feature['GR_Area'] * feature["GR_{0!s}_Mean".format(counter)]
                    volume_field = {volume_index: volume}
                    polygon.dataProvider().changeAttributeValues({feature.id(): volume_field})
            counter += 1

        self.select_results()

    def select_results(self):
        """ Extract the results from fields into a list, so it can be written into a CSV file. """
        i = 0
        for polygon in self.copied_groyne_cell_polygons:
            for feature in polygon.getFeatures():
                feature_results = [i, feature['GR_Area']]
                counter = 1
                for raster in self.input_elevation_rasters:
                    volume = feature["GR_{0!s}_Vol".format(counter)]
                    feature_results.append(volume)
                    counter += 1
                counter = 1
                for raster in self.input_elevation_rasters:
                    mean = feature["GR_{0!s}_Mean".format(counter)]
                    feature_results.append(mean)
                    counter += 1
                i += 1
                self.results.append(feature_results)

        self.results_header = ["Groyne Cell", "Area"]

        for raster in self.input_elevation_rasters:
            raster_name = os.path.basename(raster.source())
            raster_name = os.path.splitext(raster_name)[0]
            self.results_header.append("{} - Volume".format(raster_name))

        for raster in self.input_elevation_rasters:
            raster_name = os.path.basename(raster.source())
            raster_name = os.path.splitext(raster_name)[0]
            self.results_header.append("{} - Average Elevation".format(raster_name))

        self.create_csv()
    
    def create_csv(self):
        """ Create a CSV file, fill it with results. """
        self.csv_path = self.results_directory_path + "/results.csv"
        results_file = open(self.csv_path, "wb")
        results_writer = csv.writer(results_file)
        # Column headers
        results_writer.writerow(self.results_header)
        for groyne_cell in self.results:
            results_writer.writerow(groyne_cell)
        results_file.close()

        self.completed_screen()

    def calculate_check(self):
        """ Check if all the required parameters for the calculation have been input. If so, allow
        the calculation to be carried out. """
        if self.groyne_input_method == "single_polygon":
            if (self.results_directory_path is None or self.results_directory_path == ""
                or len(self.input_elevation_rasters) == 0 or self.input_elevation_rasters_invalid_layers > 0
                or self.input_groyne_cell_polygons is None or self.input_groyne_cell_polygon_ok is False):
                self.dlg.calculate_check_label.setText("Required inputs are missing. Please go back and enter them.")
                self.dlg.calculate_check_label.setStyleSheet('color: red')
                self.dlg.calculate_button.setEnabled(False)
            else:
                self.dlg.calculate_check_label.setText("")
                self.dlg.calculate_button.setEnabled(True)
        elif self.groyne_input_method == "multiple_polygons":
            if (self.results_directory_path is None or self.results_directory_path == ""
                or len(self.input_elevation_rasters) == 0 or self.input_elevation_rasters_invalid_layers > 0
                or len(self.input_groyne_cell_polygons) == 0 or self.input_groyne_cell_polygons_invalid_layers != 0):
                self.dlg.calculate_check_label.setText("Required inputs are missing. Please go back and enter them.")
                self.dlg.calculate_check_label.setStyleSheet('color: red')
                self.dlg.calculate_button.setEnabled(False)
            else:
                self.dlg.calculate_check_label.setText("")
                self.dlg.calculate_button.setEnabled(True)
        elif self.groyne_input_method == "single_line":
            if (self.results_directory_path is None or self.results_directory_path == ""
                or len(self.input_elevation_rasters) == 0 or self.input_elevation_rasters_invalid_layers > 0
                or self.input_groyne_line is None or self.input_groyne_line_ok is False):
                self.dlg.calculate_check_label.setText("Required inputs are missing. Please go back and enter them.")
                self.dlg.calculate_check_label.setStyleSheet('color: red')
                self.dlg.calculate_button.setEnabled(False)
            else:
                self.dlg.calculate_check_label.setText("")
                self.dlg.calculate_button.setEnabled(True)
        elif self.groyne_input_method == "multiple_lines":
            if (self.results_directory_path is None or self.results_directory_path == ""
                or len(self.input_elevation_rasters) == 0 or self.input_elevation_rasters_invalid_layers > 0
                or self.input_groyne_line is None or self.input_groyne_line_ok is False):
                self.dlg.calculate_check_label.setText("Required inputs are missing. Please go back and enter them.")
                self.dlg.calculate_check_label.setStyleSheet('color: red')
                self.dlg.calculate_button.setEnabled(False)
            else:
                self.dlg.calculate_check_label.setText("")
                self.dlg.calculate_button.setEnabled(True)
        elif self.groyne_input_method == "multiple_multipoints":
            if (self.results_directory_path is None or self.results_directory_path == ""
                or len(self.input_elevation_rasters) == 0 or self.input_elevation_rasters_invalid_layers > 0
                or self.input_groyne_multipoints is None or self.input_groyne_multipoints_invalid_layers != 0):
                self.dlg.calculate_check_label.setText("Required inputs are missing. Please go back and enter them.")
                self.dlg.calculate_check_label.setStyleSheet('color: red')
                self.dlg.calculate_button.setEnabled(False)
            else:
                self.dlg.calculate_check_label.setText("")
                self.dlg.calculate_button.setEnabled(True)

    def completed_screen(self):
        """ Show the completed screen and populate it with information. """
        self.current_tab = self.page_indexes['elevation completed']
        self.dlg.stack.setCurrentIndex(self.current_tab)

        self.dlg.results_textEdit.append("<b>Success!</b>")
        self.dlg.results_textEdit.append("")
        self.dlg.results_textEdit.append("The analysis has been completed.")
        self.dlg.results_textEdit.append("")
        self.dlg.results_textEdit.append("The outputs from this program can be found at <b>{0}</b>".format(self.results_directory_path))
        self.dlg.results_textEdit.append("They include <b>{0}</b>, which contains data such as the area"
                                         " of each groyne cell, and the volume and average elevation of material within it,"
                                         " and one or more shape files representing groyne cells with this information in fields,"
                                         " which can be used for data visualisation purposes.".format(self.csv_path))

        self.dlg.next_button.setEnabled(False)
        self.dlg.previous_button.setEnabled(False)

    # Beach Profile Generation Tool
    def profiles_select_results_directory(self):
        """ Bring up a screen allowing users to pick a folder, store this as an attribute """
        self.profiles_results_directory_path = QFileDialog.getExistingDirectory(self.dlg, "Choose results directory")
        self.dlg.profiles_results_directory_lineEdit.setText(self.profiles_results_directory_path)
        self.check_inputs()

    def profiles_select_input_raster(self):
        """ Bring up a screen allowing users to select one or more .TIf files, store this as an attribute list and check
        if valid. """
        self.profiles_input_elevation_rasters_paths = QFileDialog.getOpenFileNames(self.dlg, "Select input rasters",
                                                                                   filter="*.tif")
        if len(self.profiles_input_elevation_rasters_paths) != 0:
            self.dlg.profiles_input_elevation_rasters_textEdit.clear()
            self.profiles_input_elevation_rasters = []
            self.profiles_input_elevation_rasters_invalid_layers = 0
            for path in self.profiles_input_elevation_rasters_paths:
                layer_name = os.path.basename(path)
                layer_name = os.path.splitext(layer_name)[0]
                elevation_layer = QgsRasterLayer(path, layer_name)
                if elevation_layer.isValid() is True:
                    self.dlg.profiles_input_elevation_rasters_textEdit.append("<span style=\"color: green;\">{0}</span".format(path))
                    self.profiles_input_elevation_rasters.append(elevation_layer)
                else:
                    self.dlg.profiles_input_elevation_rasters_textEdit.append("<span style=\"color: red;\">{0}</span".format(path))
                    self.profiles_input_elevation_rasters_invalid_layers += 1

            if self.profiles_input_elevation_rasters_invalid_layers == 0:
                self.dlg.profiles_elevation_raster_check_label.setText("Elevation rasters have been selected and are all valid.")
                self.dlg.profiles_elevation_raster_check_label.setStyleSheet('color: green')
            elif self.profiles_input_elevation_rasters_invalid_layers == 1:
                self.dlg.profiles_elevation_raster_check_label.setText("Elevation rasters have been selected, but one is invalid.")
                self.dlg.profiles_elevation_raster_check_label.setStyleSheet('color: red')
            else:
                self.dlg.profiles_elevation_raster_check_label.setText("Elevation rasters have been selected, but {0} are invalid".format(self.input_groyne_cell_polygons_invalid_layers))
                self.dlg.profiles_elevation_raster_check_label.setStyleSheet('color: red')
        else:
            self.profiles_input_elevation_rasters = None

        self.check_inputs()

    def profiles_select_input_lines(self):
        """ Bring up a screen allowing the user to select multiple .shp files. Store this as an attribute list and check
        if valid. """
        self.profiles_input_lines_paths = QFileDialog.getOpenFileNames(self.dlg,
                                                                             "Select input profile lines",
                                                                             filter = "*.shp")
        if len(self.profiles_input_lines_paths) != 0:
            self.dlg.profiles_input_lines_textEdit.clear()
            self.profiles_input_lines_invalid_layers = 0
            counter = 1
            self.profiles_input_line = []
            for path in self.profiles_input_lines_paths:
                line_layer = QgsVectorLayer(path, "Profile line {0}".format(counter), "ogr")
                if line_layer.isValid() is True:
                    self.dlg.profiles_input_lines_textEdit.append("<span style=\"color: green;\">{0}</span>".format(path))
                    self.profiles_input_line.append(line_layer)
                else:
                    self.dlg.profiles_input_lines_textEdit.append(
                        "<span style=\"color: red;\">{0}</span>".format(path))
                    self.profiles_input_lines_invalid_layers += 1

            if self.profiles_input_lines_invalid_layers == 0:
                self.dlg.profiles_lines_check_label.setText("Profile lines have been selected and are all valid.")
                self.dlg.profiles_lines_check_label.setStyleSheet('color: green')
            elif self.profiles_input_lines_invalid_layers == 1:
                self.dlg.profiles_lines_check_label.setText("Profile lines have been selected, but one is invalid.")
                self.dlg.profiles_lines_check_label.setStyleSheet('color: red')
            else:
                self.dlg.profiles_lines_check_label.setText("Profile lines have been selected, but {0} are invalid".format(self.input_groyne_cell_polygons_invalid_layers))
                self.dlg.profiles_lines_check_label.setStyleSheet('color: red')
        else:
            self.profiles_input_line = None
            self.profiles_input_lines_paths = None

    def profiles_perform_analysis(self):
        self.profiles_create_profile()
        self.profiles_create_csv()

    def profiles_create_profile(self):
        # Get the distance value from the spinBox
        distance = self.dlg.profiles_distance_spinBox.value()
        # Create points along the line
        # Parameters: vector line, distance, start point, end point, output file
        self.all_results = []
        for profile_line in self.profiles_input_line:
            profile_points = processing.runalg("qgis:createpointsalonglines", profile_line, distance, 0, 0, None)
            # Get the path
            profile_points_path = profile_points['output']
            # Create a vector layer from the path
            profile_points = QgsVectorLayer(profile_points_path, "Profile Points", "ogr")

            line_results = []
            for input_raster in self.profiles_input_elevation_rasters:
                # Picking a path name
                # Raster name
                raster_name = os.path.basename(input_raster.source())
                raster_name = os.path.splitext(raster_name)[0]
                # Profile name
                profile_name = os.path.basename(profile_line.source())
                profile_name = os.path.splitext(profile_name)[0]

                elevation_points_path_name = "{}/{}_{}_Profile.shp".format(self.profiles_results_directory_path,
                                                                               profile_name, raster_name)

                # Extract the raster values to the points
                processing.runalg("saga:addgridvaluestopoints", profile_points, input_raster.source(), 0,
                                  elevation_points_path_name)
                elevation_points = QgsVectorLayer(elevation_points_path_name,
                                                  "{}_{}_Elevation Points".format(profile_name, raster_name), "ogr")
                QgsMapLayerRegistry.instance().addMapLayer(elevation_points)

                # Create a set with field names
                original_field_names = set()
                pr = profile_points.dataProvider()
                for field in pr.fields():
                    name = str(field.name())
                    original_field_names.add(name)

                # Create a set with the new field names
                new_field_names = set()
                pr = elevation_points.dataProvider()
                for field in pr.fields():
                    name = str(field.name())
                    new_field_names.add(name)

                # We can now get the name of the field that was added by the addgridvaluestopoints algorithm
                new_field = new_field_names.difference(original_field_names)
                new_field = list(new_field)
                new_field = new_field[0]

                # Get the results
                profile_results = []
                for feature in elevation_points.getFeatures():
                    result = [feature['Distance'], feature[new_field]]
                    profile_results.append(result)
                line_results.append(profile_results)

            self.all_results.append(line_results)

    def profiles_create_csv(self):
        line_counter = 0
        for line in self.all_results:
            raster_counter = 0
            for raster in line:
                line_name = self.profiles_input_line[line_counter]
                line_name = line_name.source()
                line_name = os.path.basename(line_name)
                line_name = os.path.splitext(line_name)[0]

                raster_name = self.profiles_input_elevation_rasters[raster_counter]
                raster_name = raster_name.source()
                raster_name = os.path.basename(raster_name)
                raster_name = os.path.splitext(raster_name)[0]

                csv_path = "{0}/{1}_{2}_profile.csv".format(self.profiles_results_directory_path, line_name,
                                                            raster_name)
                results_file = open(csv_path, "wb")
                results_writer = csv.writer(results_file)
                # Column header
                results_writer.writerow(["Distance along profile", "Elevation"])
                for result in raster:
                    results_writer.writerow(result)
                raster_counter += 1
            line_counter += 1

        self.profiles_completed_screen()

    def profiles_calculate_check(self):
        """ Check if all the required parameters for the calculation have been input. If so, allow
        the calculation to be carried out. """
        if (self.profiles_results_directory_path is None
            or self.profiles_input_elevation_rasters is None
            or self.profiles_input_elevation_rasters_invalid_layers > 0
            or self.profiles_input_line is None
            or self.profiles_input_lines_invalid_layers > 0):
            self.dlg.profiles_calculate_check_label.setText("Required inputs are missing. Please go back and enter them.")
            self.dlg.profiles_calculate_check_label.setStyleSheet('color: red')
            self.dlg.profiles_calculate_button.setEnabled(False)
        else:
            self.dlg.profiles_calculate_check_label.setText("")
            self.dlg.profiles_calculate_button.setEnabled(True)

    def profiles_completed_screen(self):
        """ Show the completed screen and populate it with information. """
        self.current_tab = self.page_indexes['profiles completed']
        self.dlg.stack.setCurrentIndex(self.current_tab)

        self.dlg.profiles_results_textEdit.append("<b>Success!</b>")
        self.dlg.profiles_results_textEdit.append("")
        if len(self.profiles_input_line) == 1:
            self.dlg.profiles_results_textEdit.append("The profile has been generated.")
        else:
            self.dlg.profiles_results_textEdit.append("The profiles have been generated.")
        self.dlg.profiles_results_textEdit.append("")
        self.dlg.profiles_results_textEdit.append("The outputs from this program can be found at <b>{0}</b>. ".format(self.profiles_results_directory_path))
        self.dlg.profiles_results_textEdit.append("They include one or more CSV files containing elevation along "
                                                  "the profiles, and shapefiles containing the elevation data as "
                                                  "attribute, which may be useful for data visualisation purposes.")

        self.dlg.next_button.setEnabled(False)
        self.dlg.previous_button.setEnabled(False)

    def show_help(self):
        """ Open the help file."""
        plugin_path = os.path.dirname(__file__)
        help_file = 'file:///{}/help.pdf'.format(plugin_path)
        QDesktopServices.openUrl(QUrl(help_file))

    def next_screen(self):
        """ Move to the next screen. """
        # If user is on the groyne input method selection screen, the next screen should not simply be the
        # next one in the list, it should be decided by which radio button is selected
        if self.current_tab == self.page_indexes['elevation groyne input method']:
            if self.groyne_input_method == "single_polygon":
                self.current_tab = self.page_indexes['single groyne cells input']
            elif self.groyne_input_method == "multiple_polygons":
                self.current_tab = self.page_indexes['multiple groyne cells input']
            elif self.groyne_input_method == "single_line":
                self.current_tab = self.page_indexes['single groyne lines input']
            elif self.groyne_input_method == "multiple_lines":
                self.current_tab = self.page_indexes['multiple groyne lines input']
            elif self.groyne_input_method == "multiple_multipoints":
                self.current_tab = self.page_indexes['groyne multipoints input']
        elif self.current_tab  == self.page_indexes['welcome']:
            if self.tool_selected == "beach_profile_generation":
                self.current_tab = self.page_indexes['profiles results directory']
            elif self.tool_selected == "groyne_elevation_analysis":
                self.current_tab = self.page_indexes['elevation results directory']
        # Otherwise, go to the next screen
        else:
            self.current_tab += 1

        self.dlg.stack.setCurrentIndex(self.current_tab)

        if self.current_tab == self.page_indexes['elevation calculate']:
            # If user is on the last screen, check if the calculation can be carried out.
            self.calculate_check()

        if self.current_tab == self.page_indexes['profiles calculate']:
            self.profiles_calculate_check()

        if self.current_tab == self.page_indexes['elevation groyne input method']:
            # If no groyne input radio button is selected, disabled the next button
            if self.groyne_input_method is None:
                self.dlg.next_button.setEnabled(False)

        if self.current_tab == self.page_indexes['elevation groyne input method']:
            # If no groyne input radio button is selected, disabled the next button
            if self.tool_selected is None:
                self.dlg.next_button.setEnabled(False)

        # If the user is on a groyne input page, make sure the next page is the calculate page
        if (self.current_tab == self.page_indexes['single groyne cells input']
            or self.current_tab == self.page_indexes['multiple groyne cells input']
            or self.current_tab == self.page_indexes['single groyne lines input']
            or self.current_tab == self.page_indexes['multiple groyne lines input']
            or self.current_tab == self.page_indexes['groyne multipoints input']):
            self.current_tab = self.page_indexes['groyne multipoints input']

        # If user has moved past the first screen, allow them to go back
        if self.current_tab > self.page_indexes['first']:
            self.dlg.previous_button.setEnabled(True)

        # If user is on the last screen, disable the next screen button
        if self.current_tab == self.page_indexes['elevation calculate']:
            self.dlg.next_button.setEnabled(False)
        elif self.current_tab == self.page_indexes['profiles calculate']:
            self.dlg.next_button.setEnabled(False)

    def previous_screen(self):
        """ Move to the previous screen. """
        # If the user is on a groyne input screen, take them back to the groyne input method selection screen
        if (self.current_tab == self.page_indexes['single groyne cells input']
            or self.current_tab == self.page_indexes['multiple groyne cells input']
            or self.current_tab == self.page_indexes['single groyne lines input']
            or self.current_tab == self.page_indexes['multiple groyne lines input']
            or self.current_tab == self.page_indexes['groyne multipoints input']):
            self.current_tab = self.page_indexes['elevation groyne input method']
        elif self.current_tab == self.page_indexes['profiles results directory']:
            self.current_tab = self.page_indexes['welcome']
        # Otherwise, take them back to the previous screen
        else:
            self.current_tab -= 1
        self.dlg.stack.setCurrentIndex(self.current_tab)

        # If user is not on the last screen, allow them to go forward
        if self.current_tab <= self.page_indexes['last']:
            self.dlg.next_button.setEnabled(True)

        if self.current_tab <= self.page_indexes['first']:
            self.dlg.previous_button.setEnabled(False)
        else:
            self.dlg.previous_button.setEnabled(True)