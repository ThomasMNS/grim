# -*- coding: utf-8 -*-
"""
 A   _____ _____  _____ __  __
    / ____|  __ \|_   _|  \/  |
   | |  __| |__) | | | | \  / |
   | | |_ |  _  /  | | | |\/| |
   | |__| | | \ \ _| |_| |  | |
    \_____|_|  \_\_____|_|  |_|
                                 Script

Analysing GRoyne Impacts on Morphology Script
Thomas Burke and Suzana Ilic, Lancaster University, February 2017
Version 0.1 (in dev), February 2017

Base code generated by Plugin Builder
"""

# Imports
from PyQt4.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QVariant
from PyQt4.QtGui import QAction, QIcon, QFileDialog, QMessageBox
from qgis.core import QgsRasterLayer, QgsVectorLayer, QgsMapLayerRegistry, QgsVectorFileWriter, QgsField
from qgis.analysis import QgsZonalStatistics
# Initialize Qt resources from file resources.py
import resources
# Import the code for the dialog
from grim_dialog import GrimDialog
# Import from the Python standard library
import os.path
import csv


class Grim:
    """QGIS Plugin Implementation."""

    # Skeleton methods
    # These were generated by Plugin Builder, and are required for the plugin to run

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Grim_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = GrimDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Grim')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'Grim')
        self.toolbar.setObjectName(u'Grim')

        # Custom instance attributes
        # These are used in GIS processing
        self.input_elevation_raster_layer = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Grim', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Grim/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Grim'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # Establishing signal / slot connections
        self.dlg.results_directory_button.clicked.connect(self.select_results_directory)
        self.dlg.input_elevation_raster_button.clicked.connect(self.select_input_raster)
        self.dlg.input_groyne_cell_polygon_button.clicked.connect(self.select_input_groyne_cell_polygon)
        self.dlg.input_groyne_cell_polygons_button.clicked.connect(self.select_input_groyne_cell_polygons)
        self.dlg.calculate_button.clicked.connect(self.calculate_zonal_statistics)
        self.dlg.close_button.clicked.connect(self.dlg.reject)

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Grim'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    def run(self):
        """Run method that performs all the real work"""
        # Reset everything
        self.results_directory_path = None
        self.dlg.results_directory_lineEdit.clear()

        self.input_elevation_raster_path = None
        self.input_elevation_raster_layer = None
        self.input_elevation_raster_ok = None
        self.dlg.input_elevation_raster_lineEdit.clear()

        self.input_groyne_cell_polygon_path = None
        self.input_groyne_cell_polygon = None
        self.input_groyne_cell_polygon_ok = None
        self.dlg.input_groyne_cell_polygon_lineEdit.clear()

        self.input_groyne_cell_polygons_paths = None
        self.input_groyne_cell_polygons = []
        self.input_groyne_cell_polygons_invalid_layers = None
        self.dlg.input_groyne_cell_polygons_textEdit.clear()

        self.copied_groyne_cell_polygons = []
        
        self.results = []

        # show the dialog
        self.dlg.show()
        
        self.check_inputs()

    # Custom methods
    # These contain logic for the GIS analysis etc
    
    def check_inputs(self):
        """ Check that all inputs are present. If so, allow the "Calculate" button to be pressed """

        # If results directory, input DEM, or both groyne input methods are blank or invalid, do not allow
        # analysis to be carried out
        if (self.results_directory_path is None or self.input_elevation_raster_ok is not True
            or (self.input_groyne_cell_polygon_ok is not True and self.input_groyne_cell_polygons_invalid_layers != 0)):
            self.dlg.calculate_button.setEnabled(False)
        else:
            self.dlg.calculate_button.setEnabled(True)

        # Check if any of the fields are blank
        if self.input_elevation_raster_path is None:
            self.dlg.elevation_raster_check_label.setText("Please select the input digital elevation model.")
            self.dlg.elevation_raster_check_label.setStyleSheet('color: red')

        if self.input_groyne_cell_polygon_path is None and self.input_groyne_cell_polygons_paths is None:
            self.dlg.groyne_cell_check_label.setText("Please select the input groyne cell polygon(s).")
            self.dlg.groyne_cell_check_label.setStyleSheet('color: red')

        if self.results_directory_path is None:
            self.dlg.results_directory_check_label.setText("Please select a results directory.")
            self.dlg.results_directory_check_label.setStyleSheet('color: red')
        else:
            self.dlg.results_directory_check_label.setText("Results directory selected.")
            self.dlg.results_directory_check_label.setStyleSheet('color: green')

    def select_results_directory(self):
        """ Bring up a screen allowing users to pick a folder, store this as an attribute """
        self.results_directory_path = QFileDialog.getExistingDirectory(self.dlg, "Choose results directory")
        self.dlg.results_directory_lineEdit.setText(self.results_directory_path)
        self.check_inputs()

    def select_input_raster(self):
        """ Bring up a screen allowing users to select a single .TIf file, store this as an attribute and check
        if valid. """
        self.input_elevation_raster_path = QFileDialog.getOpenFileName(self.dlg, "Select input raster", filter="*.tif")
        self.dlg.input_elevation_raster_lineEdit.setText(self.input_elevation_raster_path)
        self.input_elevation_raster_layer = QgsRasterLayer(self.input_elevation_raster_path, "Input Elevation Raster")

        # Check if the selected layer is valid.
        if self.input_elevation_raster_layer.isValid() is True:
            self.dlg.elevation_raster_check_label.setText("Digital elevation model has been selected and is valid.")
            self.dlg.elevation_raster_check_label.setStyleSheet('color: green')
            self.input_elevation_raster_ok = True
        else:
            self.dlg.elevation_raster_check_label.setText("Digital elevation model has been selected but is not"
                                                          "valid.")
            self.dlg.elevation_raster_check_label.setStyleSheet('color: red')
            self.input_elevation_raster_ok = False

        self.check_inputs()

    def select_input_groyne_cell_polygon(self):
        """ Bring up a screen allowing the user to select a single .shp file. Store this as an attribute and check
        if valid. If a file is chosen, the multiple polygons selection method is blanked. """
        self.input_groyne_cell_polygon_path = QFileDialog.getOpenFileName(self.dlg, "Select input groyne cell polygon",
                                                                     filter="*.shp")
        self.dlg.input_groyne_cell_polygon_lineEdit.setText(self.input_groyne_cell_polygon_path)
        self.input_groyne_cell_polygon = QgsVectorLayer(self.input_groyne_cell_polygon_path, "Input Groyne Cell", "ogr")

        if self.input_groyne_cell_polygon.isValid() is True:
            self.dlg.groyne_cell_check_label.setText("Groyne cell polygon has been selected and is valid.")
            self.dlg.groyne_cell_check_label.setStyleSheet('color: green')
            self.input_groyne_cell_polygon_ok = True
        else:
            self.dlg.groyne_cell_check_label.setText("Groyne cell polygon has been selected but is not valid")
            self.dlg.groyne_cell_check_label.setStyleSheet('color: red')
            self.input_groyne_cell_polygon_ok = False

        self.input_groyne_cell_polygons_paths_path = None
        self.dlg.input_groyne_cell_polygons_textEdit.clear()

        self.input_groyne_cell_polygons = [self.input_groyne_cell_polygon]
        self.duplicate_input_groyne_cell_polygon()

        self.check_inputs()

    def select_input_groyne_cell_polygons(self):
        """ Bring up a screen allowing the user to select multiple .shp files. Store this as an attribute and check
        if valid. If files are chosen, the single polygon selection method is blanked. """
        self.input_groyne_cell_polygons_paths = QFileDialog.getOpenFileNames(self.dlg,
                                                                             "Select input groyne cell polygons",
                                                                             filter = "*.shp")
        self.dlg.input_groyne_cell_polygons_textEdit.clear()
        self.input_groyne_cell_polygons_invalid_layers = 0
        counter = 1
        for path in self.input_groyne_cell_polygons_paths:
            groyne_cell_layer = QgsVectorLayer(path, "Groyne cell {0}".format(counter), "ogr")
            self.input_groyne_cell_polygons.append(groyne_cell_layer)
            if groyne_cell_layer.isValid() is True:
                self.dlg.input_groyne_cell_polygons_textEdit.append("<span style=\"color: green;\">{0}</span".format(path))
            else:
                self.dlg.input_groyne_cell_polygons_textEdit.append(
                    "<span style=\"color: red;\">{0}</span".format(path))
                self.input_groyne_cell_polygons_invalid_layers += 1

        if self.input_groyne_cell_polygons_invalid_layers == 0:
            self.dlg.groyne_cell_check_label.setText("Groyne cell polygons have been selected and are all valid.")
            self.dlg.groyne_cell_check_label.setStyleSheet('color: green')
        elif self.input_groyne_cell_polygons_invalid_layers == 1:
            self.dlg.groyne_cell_check_label.setText("Groyne cell polygons have been selected, but one is invalid.")
            self.dlg.groyne_cell_check_label.setStyleSheet('color: red')
        else:
            self.dlg.groyne_cell_check_label.setText("Groyne cell polygons have been selected, but {0} are invalid".format(self.input_groyne_cell_polygons_invalid_layers))
            self.dlg.groyne_cell_check_label.setStyleSheet('color: red')

        self.input_groyne_cell_polygon_path = None
        self.dlg.input_groyne_cell_polygon_lineEdit.clear()

        self.duplicate_input_groyne_cell_polygon()

        self.check_inputs()

    def duplicate_input_groyne_cell_polygon(self):
        """ Create copies of the input groyne cells and save to disc. This is done because the QgsZonalStatistics
        method adds a new field to the shapefile, which the user may not want, so it is safer to work on a copy. """
        for layer in self.input_groyne_cell_polygons:
            layer_name = os.path.basename(layer.source())
            layer_name = os.path.splitext(layer_name)[0]
            copied_groyne_cell_polygon_path = self.results_directory_path + "\\" + layer_name + "_copied.shp"
            QgsVectorFileWriter.writeAsVectorFormat(layer, copied_groyne_cell_polygon_path,
                                                    "utf-8", None)
            self.copied_groyne_cell_polygons.append(QgsVectorLayer(copied_groyne_cell_polygon_path,
                                                             layer_name + " Copied", "ogr"))
        
    def calculate_zonal_statistics(self):
        """ Use QgsZonalStatistics to calculate the average raster value beneath each polygon IE the average beach
        elevation within each polygon. """
        QgsMapLayerRegistry.instance().addMapLayer(self.input_elevation_raster_layer)
        for polygon in self.copied_groyne_cell_polygons:
            QgsMapLayerRegistry.instance().addMapLayer(polygon)
            # Arguments - (polygon, raster, attribute prefix, band, stat to calculate
            zonal_stats = QgsZonalStatistics(polygon, self.input_elevation_raster_path, "", 1,
                                         QgsZonalStatistics.Mean)
            zonal_stats.calculateStatistics(None)

        self.calculate_area()

    def calculate_area(self):
        """ Add a field to the shape file called area, insert polygon area into this. Add a volume field while
         we're at it. """
        for polygon in self.copied_groyne_cell_polygons:
            polygon.dataProvider().addAttributes([QgsField("Area", QVariant.Double), QgsField("Volume", QVariant.Double)])
            polygon.updateFields()

            for feature in polygon.getFeatures():
                area = feature.geometry().area()
                area_index = feature.fieldNameIndex('Area')
                area_field = {area_index: area}
                polygon.dataProvider().changeAttributeValues({feature.id(): area_field})

        self.calculate_volume()

    def calculate_volume(self):
        """ Insert volume (area * average height) into the volume field. """
        for polygon in self.copied_groyne_cell_polygons:
            for feature in polygon.getFeatures():
                volume_index = feature.fieldNameIndex('Volume')
                volume = feature['Area'] * feature['Mean']
                volume_field = {volume_index: volume}
                polygon.dataProvider().changeAttributeValues({feature.id(): volume_field})

        self.select_results()

    def select_results(self):
        """ Extract the results from fields into a list, so it can be written into a CSV file. """
        i = 0
        for polygon in self.copied_groyne_cell_polygons:
            for feature in polygon.getFeatures():
                self.results.append([i, feature['Mean'], feature['Area'], feature['Volume']])
                i += 1

        self.create_csv()
    
    def create_csv(self):
        """ Create a CSV file, fill it with results. """
        csv_path = self.results_directory_path + "/results.csv"
        results_file = open(csv_path, "wb")
        results_writer = csv.writer(results_file)
        # Column headers
        results_writer.writerow(["Groyne Cell", "Average Elevation", "Groyne Cell Area", "Groyne Cell Volume"])
        for groyne_cell in self.results:
            results_writer.writerow(groyne_cell)
        results_file.close()